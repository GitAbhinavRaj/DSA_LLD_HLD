Example 1:

Input: 
nums = [3,4,5,6], target = 7

Output: [0,1]
Explanation: nums[0] + nums[1] == 7, so we return [0, 1].

Example 2:

Input: nums = [4,5,6], target = 10

Output: [0,2]
Example 3:

Input: nums = [5,5], target = 10

Output: [0,1]


Code:

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> um;
        vector<int> ans;
        for(int i = 0;i < nums.size();i++){
            um[nums[i]] = i;
        }
        for(int i =0 ; i< nums.size();i++){
            int lookup = target - nums[i];
            if (um.count(lookup) && um[lookup] != i) {
                return {i, um[lookup]};
            }
        } return {};
    }
};
